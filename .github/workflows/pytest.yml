name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

permissions:
  contents: read

env:
  RUNNER_ARCH_MAP: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'

jobs:
  build:
    runs-on: ${{ format('{0}-{1}', 'base-dind-2204', matrix.arch) }}

    strategy:
      matrix:
        arch: ['amd64', 'arm64']
      fail-fast: false

    steps:
    - name: Cleanup previous jobs
      run: |
        echo "Cleaning up previous runs"
        sudo rm -rf ${{ github.workspace }}/*
        sudo rm -rf ${{ github.workspace }}/.??*

    - name: Set ARCH
      run: |
        echo "ARCH=${{ fromJson(env.RUNNER_ARCH_MAP)[0][matrix.arch] }}" >> $GITHUB_ENV

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Find SHA
      run: |
        if [[ "${{github.event.pull_request.head.sha}}" != "" ]]
        then
          echo "ARTIFACT_SHA=$(echo ${{github.event.pull_request.head.sha}})" >> $GITHUB_ENV
        else
          echo "ARTIFACT_SHA=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        fi

    - name: Create python isolated env
      run: |
        sudo apt-get update
        sudo apt-get -y install python3-venv
        python3 -m venv .venv

    - name: Install python dependencies
      run: |
        ./.venv/bin/python3 -m pip install --upgrade pip
        # FIXME: add requirements instead of pip-installing them here
        ./.venv/bin/python3 -m pip install flake8 build setuptools cffi pytest pytest-cov datestamp cmake_build_extension
        #if [ -f requirements.txt ]; then python3 -m pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        ./.venv/bin/python3 -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        ./.venv/bin/python3 -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=.venv

    - name: Install vaccel
      run: |
        wget "https://s3.nbfc.io/nbfc-assets/github/vaccel/rev/main/${{ env.ARCH }}/release/vaccel-latest-bin.tar.gz"
        sudo tar xfv vaccel-latest-bin.tar.gz --strip-components=2 -C /usr/local
        rm -r vaccel-latest-bin.tar.gz
        sudo ldconfig

    - name: Test with pytest
      env:
        VACCEL_PLUGINS: libvaccel-noop.so
        PYTHONPATH: .
      run: |
        #python3 -m build
        ./.venv/bin/python3 builder.py
        ./.venv/bin/python3 -m pytest

    - name: Test with coverage
      env:
        VACCEL_PLUGINS: libvaccel-noop.so
        PYTHONPATH: .
      run: |
        ./.venv/bin/python3 -m pytest --cov=vaccel tests/

    - name: Build pip package
      env:
        VACCEL_PLUGINS: libvaccel-noop.so
      run: |
        ./.venv/bin/python3 -m build
        VERSION=$(./.venv/bin/python3 setup.py --version)
        PYVER=$(./.venv/bin/python3 --version | awk '{print $2}' | awk -F\. '{print $1 $2 }')
        echo "wheel_name=vaccel-${VERSION}-${PYVER}-${PYVER}m_Linux_${{ env.ARCH }}" >> $GITHUB_ENV
        echo "built: ${{ env.wheel_name }}"

    - name: Upload artifact to s3
      uses: cloudkernels/minio-upload@master
      with:
        url: https://s3.nubificus.co.uk
        access-key: ${{ secrets.AWS_ACCESS_KEY }}
        secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #local-path: dist/${{ env.wheel_name }}
        local-path: dist/
        policy: 1
        remote-path: nbfc-assets/github/python-vaccel/${{ env.ARTIFACT_SHA }}/${{ env.ARCH }}/

     # FIXME: add pypi publish step
     #- name: Publish package
     #  if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
     #  uses: pypa/gh-action-pypi-publish@release/v1
     #  with:
     #    password: ${{ secrets.PYPI_ANANOS_TOKEN }}

    - name: Cleanup
      run: |
        # FIXME: remove pip package if installed
        #pip3 uninstall vaccel
        echo "built: ${{ env.wheel_name }}"
        rm -rf ./.venv
